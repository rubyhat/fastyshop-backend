script:pre-request {
  const fetch = require('node-fetch');
  
  const accessToken = bru.getEnvVar("access_token");
  const refreshToken = bru.getEnvVar("refresh_token");
  const tokenExp = parseInt(bru.getEnvVar("access_token_exp") || "0", 10);
  const now = Math.floor(Date.now() / 1000); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const baseUrl = bru.getEnvVar("URL") || "http://localhost:3000";
  
  
  if ((!accessToken || now >= tokenExp) && refreshToken) {
    console.log("üîÑ Access token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏—Å—Ç—ë–∫. –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ /auth/refresh...");
  
    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–ª–æ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ x-www-form-urlencoded
    const formBody = `refresh_token=${encodeURIComponent(refreshToken)}`;
  
    try {
      const response = await fetch.default(`${baseUrl}/auth/refresh`, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        body: formBody
      });
  
      if (!response.ok) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${response.status} ${response.statusText}`);
        return;
      }
  
      const data = await response.json();
  
      if (data.access_token) {
        bru.setEnvVar("access_token", data.access_token);
        console.log("‚úÖ access_token –æ–±–Ω–æ–≤–ª—ë–Ω");
      }
  
      if (data.refresh_token) {
        bru.setEnvVar("refresh_token", data.refresh_token);
        console.log("‚úÖ refresh_token –æ–±–Ω–æ–≤–ª—ë–Ω");
      }
  
      const tokenParts = data.access_token.split(".");
      if (tokenParts.length === 3) {
        const payload = JSON.parse(Buffer.from(tokenParts[1], "base64").toString("utf8"));
        if (payload.exp) {
          bru.setEnvVar("access_token_exp", payload.exp.toString());
          console.log("üïí access_token_exp –æ–±–Ω–æ–≤–ª—ë–Ω:", payload.exp);
        }
      }
  
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fetch: ${error.message}`);
    }
  }
}
